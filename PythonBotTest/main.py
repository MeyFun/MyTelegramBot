import subprocess
import sys
subprocess.call([sys.executable, "install_packages.py"])

import telebot
import sqlite3
from telebot import types
from config import BOT_TOKEN, ADMIN_PASSWORD_HASH
from password_utils import verify_password
from handlers.test_passage import handle_test, register_answer_handlers, format_time_to_omsk
from handlers.test_creation import register_test_creation_handler

bot = telebot.TeleBot(BOT_TOKEN)

conn = sqlite3.connect('tests.db', check_same_thread=False)
cur = conn.cursor()

cur.execute("CREATE TABLE IF NOT EXISTS tests (code TEXT, question TEXT, correct_answer TEXT, options TEXT, subject TEXT)")
cur.execute("CREATE TABLE IF NOT EXISTS results (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, code TEXT, question TEXT, answer TEXT)")
cur.execute("CREATE TABLE IF NOT EXISTS admins (user_id INTEGER PRIMARY KEY)")
cur.execute("""CREATE TABLE IF NOT EXISTS registration_attempts (user_id INTEGER, username TEXT, first_name TEXT, last_name TEXT, success INTEGER, timestamp DATETIME DEFAULT CURRENT_TIMESTAMP)""")
conn.commit()

user_states = {}
test_building = {}
attempts = {}

def is_admin(user_id):
    cur.execute("SELECT user_id FROM admins WHERE user_id = ?", (user_id,))
    return cur.fetchone() is not None

@bot.message_handler(commands=['start'])
def start(msg):
    bot.send_message(msg.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –≤–≤–µ–¥–∏ /start_test. –î–ª—è —Å–ø—Ä–∞–≤–∫–∏ ‚Äî /info")

temp_passwords = {} 
@bot.message_handler(commands=['register'])
def register(msg):
    user_id = msg.from_user.id
    username = msg.from_user.username
    first_name = msg.from_user.first_name
    last_name = msg.from_user.last_name or ""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    if attempts.get(user_id, 0) >= 3:
        bot.send_message(msg.chat.id, "‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    args = msg.text.strip().split()
    if len(args) != 2:
        bot.send_message(msg.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register –≤–∞—à_–ø–∞—Ä–æ–ª—å")
        return

    entered_password = args[1]
    success = 0

    # –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º, –Ω–æ –≥–æ–≤–æ—Ä–∏–º, —á—Ç–æ –Ω–µ–≤–µ—Ä–Ω—ã–π
    if user_id not in temp_passwords:
        temp_passwords[user_id] = entered_password
        attempts[user_id] = attempts.get(user_id, 0) + 1
        remaining = 3 - attempts[user_id]
        response = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}"

    # –í—Ç–æ—Ä–æ–π –≤–≤–æ–¥ ‚Äî —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–µ—Ä–≤—ã–º
    else:
        if entered_password == temp_passwords[user_id] and verify_password(ADMIN_PASSWORD_HASH, entered_password):
            cur.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (user_id,))
            conn.commit()
            success = 1
            response = "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å."
        else:
            attempts[user_id] = attempts.get(user_id, 0) + 1
            remaining = 3 - attempts[user_id]
            response = f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining}"
        temp_passwords.pop(user_id, None)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫
    cur.execute("""
        INSERT INTO registration_attempts 
        (user_id, username, first_name, last_name, success) 
        VALUES (?, ?, ?, ?, ?)
    """, (user_id, username, first_name, last_name, success))
    conn.commit()
    bot.send_message(msg.chat.id, response)

@bot.message_handler(commands=['admin_list'])
def admin_list(msg):
        user_id = msg.from_user.id
        if not is_admin(user_id):
            bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
            return

        cur.execute("SELECT user_id FROM admins")
        ids = [row[0] for row in cur.fetchall()]

        if not ids:
            bot.send_message(msg.chat.id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
            return

        text = "*–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏:*\n"
        for uid in ids:
            try:
                user = bot.get_chat(uid)
                name = f"@{user.username}" if user.username else f"{user.first_name} {user.last_name or ''}"
                text += f"‚Ä¢ {name.strip()}\n"
            except Exception:
                text += f"‚Ä¢ ID: {uid} (–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)\n"

        bot.send_message(msg.chat.id, text, parse_mode="HTML")

@bot.message_handler(commands=['RegLog'])
def reg_log(msg):
        user_id = msg.from_user.id
        if not is_admin(user_id):
            bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.")
            return

        cur.execute("SELECT user_id, username, first_name, last_name, success, timestamp FROM registration_attempts ORDER BY timestamp DESC")
        attempts = cur.fetchall()

        if not attempts:
            bot.send_message(msg.chat.id, "–õ–æ–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç.")
            return

        log_text = "üìù *–õ–æ–≥–∏ –ø–æ–ø—ã—Ç–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:*\n"
        for attempt in attempts:
            user_id, username, first_name, last_name, success, timestamp = attempt
            name = f"@{username}" if username else f"{first_name} {last_name}".strip()
            status = "‚úÖ" if success else "‚ùå"
            formatted_time = format_time_to_omsk(timestamp)
            log_text += f"{status} {name} (ID: {user_id}) - {formatted_time}\n"

        bot.send_message(msg.chat.id, log_text, parse_mode="HTML")

@bot.message_handler(commands=['remove_teacher'])
def remove_teacher_start(msg):
    user_id = msg.from_user.id

    if not is_admin(user_id):
        bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π")
        return

    cur.execute("SELECT user_id FROM admins")
    teachers = cur.fetchall()

    if not teachers:
        bot.send_message(msg.chat.id, "‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

    for teacher in teachers:
        try:
            chat = bot.get_chat(teacher[0])
            name = f"@{chat.username}" if chat.username else f"{chat.first_name} {chat.last_name or ''}"
            markup.add(f"{name} (ID: {teacher[0]})")
        except:
            markup.add(f"ID: {teacher[0]}")

    markup.add("‚ùå –û—Ç–º–µ–Ω–∞")

    user_states[user_id] = {
        'stage': 'removing_teacher',
        'teachers': [t[0] for t in teachers]
    }
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get('stage') == 'removing_teacher')
def remove_teacher_selected(msg):
    user_id = msg.from_user.id
    state = user_states[user_id]

    if msg.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        del user_states[user_id]
        bot.send_message(msg.chat.id, "–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=types.ReplyKeyboardRemove())
        return

    try:
        selected_id = int(msg.text.split("ID: ")[1].rstrip(")"))
    except (IndexError, ValueError):
        bot.send_message(msg.chat.id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    if selected_id not in state['teachers']:
        bot.send_message(msg.chat.id, "‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
        return

    cur.execute("DELETE FROM admins WHERE user_id = ?", (selected_id,))
    conn.commit()

    del user_states[user_id]

    try:
        chat = bot.get_chat(selected_id)
        name = f"@{chat.username}" if chat.username else f"{chat.first_name} {chat.last_name or ''}"
        bot.send_message(msg.chat.id, f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {name} (ID: {selected_id}) —É–¥–∞–ª–µ–Ω.",
                         reply_markup=types.ReplyKeyboardRemove())
    except:
        bot.send_message(msg.chat.id, f"‚úÖ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å (ID: {selected_id}) —É–¥–∞–ª–µ–Ω.",
                         reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=['all_commands'])
def all_commands(msg):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("/start_test"))
    user_id = msg.from_user.id
    if not is_admin(user_id):
        bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–∏–º –∫–æ–º–∞–Ω–¥–∞–º.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("/start_test"))

    if is_admin:
        markup.add(
            types.KeyboardButton("/add_test"),
            types.KeyboardButton("/test_list"),
            types.KeyboardButton("/delete_test"),
            types.KeyboardButton("/edit_test"),
            types.KeyboardButton("/admin_list"),
            types.KeyboardButton("/RegLog"),
            types.KeyboardButton("/start_test"),
            types.KeyboardButton("/info"),
            types.KeyboardButton("/answers"),
            types.KeyboardButton("/delete_answers"),
            types.KeyboardButton("/all_commands")
        )

    text = (
        "üìö *–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:*\n\n"
        "/add_test ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç\n"
        "/test_list ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n"
        "/delete_test ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç\n"
        "/edit_test ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/admin_list ‚Äî —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π\n"
        "/RegLog ‚Äî –ª–æ–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n"
        "/start_test ‚Äî –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç\n"
        "/info ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
        "/answers - –ø–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n"
        "/delete_answers - –£–¥–∞–ª–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç\n"
        "/all_commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã"
    )
    bot.send_message(msg.chat.id, text, parse_mode="HTML", reply_markup=markup)

@bot.message_handler(commands=['test_list'])
def test_list(msg):
        user_id = msg.from_user.id
        if not is_admin(user_id):
            bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤.")
            return

        cur.execute("SELECT DISTINCT subject FROM tests ORDER BY subject")
        subjects = [row[0] for row in cur.fetchall() if row[0]]

        if not subjects:
            bot.send_message(msg.chat.id, "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for subj in subjects:
            markup.add(subj)

        user_states[user_id] = {'stage': 'choosing_subject_for_list'}
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get('stage') == 'choosing_subject_for_list')
def choose_subject(msg):
        user_id = msg.from_user.id
        subject = msg.text.strip()

        cur.execute("SELECT DISTINCT code FROM tests WHERE subject = ?", (subject,))
        tests = cur.fetchall()
        if not tests:
            bot.send_message(msg.chat.id, "–ü–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É —Ç–µ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        message = f"üìö –¢–µ—Å—Ç—ã –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É *{subject}*:\n\n"
        for (code,) in tests:
            cur.execute("SELECT COUNT(*) FROM tests WHERE code = ?", (code,))
            count = cur.fetchone()[0]
            message += f"üîπ –ö–æ–¥: *{code}* ‚Äî {count} –≤–æ–ø—Ä–æ—Å–æ–≤\n"

        del user_states[user_id]
        bot.send_message(msg.chat.id, message, parse_mode="HTML", reply_markup=types.ReplyKeyboardRemove())

@bot.message_handler(commands=['answers'])
def show_answers(msg):
    user_id = msg.from_user.id
    if not is_admin(user_id):
        bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    cur.execute("SELECT DISTINCT subject FROM tests ORDER BY subject")
    subjects = [row[0] for row in cur.fetchall() if row[0]]

    if not subjects:
        bot.send_message(msg.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for subject in subjects:
        markup.add(subject)
    markup.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")

    user_states[user_id] = {
        'stage': 'choosing_subject_for_answers'
    }
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=markup)

@bot.message_handler(commands=['edit_test'])
def edit_test_start(msg):
        user_id = msg.from_user.id
        if not is_admin(user_id):
            bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é —Ç–µ—Å—Ç–æ–≤.")
            return

        cur.execute("SELECT DISTINCT subject FROM tests ORDER BY subject")
        subjects = [row[0] for row in cur.fetchall() if row[0]]

        if not subjects:
            bot.send_message(msg.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ç–µ—Å—Ç–∞–º–∏.")
            return

        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        for subj in subjects:
            markup.add(subj)

        test_building[user_id] = {"stage": "edit_subject"}
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω—É–∂–Ω—ã–π —Ç–µ—Å—Ç:", reply_markup=markup)

@bot.message_handler(commands=['delete_answers'])
def delete_answers(msg):
    user_id = msg.from_user.id
    if not is_admin(user_id):
        bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã.")
        return

    cur.execute("SELECT DISTINCT subject FROM tests")
    subjects = [row[0] for row in cur.fetchall() if row[0]]

    if not subjects:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å —Ç–µ—Å—Ç–∞–º–∏.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for subject in subjects:
        markup.add(subject)

    user_states[user_id] = {'stage': 'delete_answers_subject'}
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, —á—å–∏ –æ—Ç–≤–µ—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=markup)

@bot.message_handler(commands=['add_test'])
def add_test(msg):
        user_id = msg.from_user.id
        if not is_admin(user_id):
            bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç—ã.")
            return

        args = msg.text.split()
        if len(args) != 2:
            bot.send_message(msg.chat.id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_test <–∫–æ–¥ —Ç–µ—Å—Ç–∞>")
            bot.send_message(msg.chat.id, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ç–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞' + '–ö–æ–¥', —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π —Å –ø–∞—Ä–æ–ª–µ–º")
            return

        code = args[1]
        cur.execute("SELECT 1 FROM tests WHERE code = ? LIMIT 1", (code,))
        if cur.fetchone():
            bot.send_message(msg.chat.id, f"‚ö†Ô∏è –¢–µ—Å—Ç —Å –∫–æ–¥–æ–º '{code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥.")
            return

        test_building[user_id] = {
            "code": code,
            "subject": "",
            "current_q": 1,
            "stage": "awaiting_subject",
            "temp_question": "",
            "temp_answers": []
        }
        bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:")

@bot.message_handler(commands=['delete_test'])
def delete_test_start(msg):
    user_id = msg.from_user.id
    if not is_admin(user_id):
        bot.send_message(msg.chat.id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ —É–¥–∞–ª—è—Ç—å —Ç–µ—Å—Ç—ã.")
        return

    cur.execute("SELECT DISTINCT subject FROM tests ORDER BY subject")
    subjects = [row[0] for row in cur.fetchall() if row[0]]

    if not subjects:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for subj in subjects:
        markup.add(subj)

    test_building[user_id] = {"stage": "delete_subject"}
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, —Ç–µ—Å—Ç –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:", reply_markup=markup)

@bot.message_handler(commands=['info'])
def info(msg):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(types.KeyboardButton("/start_test"))

    if is_admin:
        markup.add(
            types.KeyboardButton("/add_test"),
            types.KeyboardButton("/test_list"),
            types.KeyboardButton("/delete_test"),
            types.KeyboardButton("/edit_test"),
            types.KeyboardButton("/all_commands")
        )
    if is_admin:
        text = (
            "üë®‚Äçüè´ *–í—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.*\n\n"
            "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/add_test ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç\n"
            "/test_list ‚Äî —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º\n"
            "/delete_test ‚Äî —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç\n"
            "/edit_test ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "/all_commands ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã\n"
        )
    else:
        text = (
            "üéì *–í—ã —Å—Ç—É–¥–µ–Ω—Ç.*\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start_test ‚Äî –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç\n"
            "/info ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"
        )

    bot.send_message(msg.chat.id, text, parse_mode="HTML", reply_markup=markup)

@bot.message_handler(commands=['start_test'])
def start_test(msg):
    user_id = msg.from_user.id
    user_states[user_id] = {'stage': 'awaiting_code'}
    bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Å—Ç—É:")

register_test_creation_handler(bot, conn, cur, test_building)
register_answer_handlers(bot, cur, user_states, conn)

@bot.message_handler(func=lambda m: m.from_user.id in user_states)
def handle_user_test(msg):
    handle_test(bot, msg, cur, conn, user_states)

bot.polling(none_stop=True)
